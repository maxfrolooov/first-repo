# Прогнозирование
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.delim("Exchange_Rate_Report.tsv", skip=0, sep="")
Sys.setlocale("LC_TIME", "C")
df$Date <- as.Date(df$Date, "%d-%b-%Y") # преобразовываем дату
x <- df$Swiss_franc
plot.ts(x)
# 1 задание: Разделить на ряды по 20 наблюдений и создать из них матрицу (matrix(x, nrow=20))
XX <- matrix(x, nrow=20)
XX <- XX[, -24]
# Рассчитать матрицу корреляций.
RR <- cor(XX)
rr <- c(RR[lower.tri(RR)]) # нижний треугольник
hist(rr) # получили много ложных корреляций и на гистограмме это хорошо видно
# Задание 2. Многошаговое прогнозирование валютного курса с помощью тренда
train <- df$Date < "2020-01-03" # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- ! train
tr <- 1:nrow(df)
reg1 <- lm(x ~ tr, subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg1), col="blue") # расчетное значение
xp <- predict(reg1, newdata=list(tr=tr[test])) # получаем прогноз
plot.ts(x[test])
lines(xp, col="blue", lw=2)
tr2 <- tr^2 # сделаем для квадратичного тренда
reg2 <- lm(x ~ tr+tr2, subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg2), col="blue")
xp2 <- predict(reg2, newdata=list(tr=tr[test], tr2=tr2[test])) # получаем прогноз
plot.ts(x[test])
lines(xp2, col="blue", lw=2)
# Задание 3.
x1 <- c(x[1], x[-length(x)]) #первый лаг
x2 <- c(x1[1], x1[-length(x)])
AR1 <- lm(x ~ x1, subset=train)
cfAR1 <- coef(AR1)
AR2 <- lm(x ~ x1+x2, subset=train)
cfAR2 <- coef(AR2)
AR02 <- lm(x ~ x2, subset=train)
cfAR02 <- coef(AR02)
xpRW <- x1[test]
xpAR1 <- cfAR1[1] + cfAR1[2] * x1[test]
xpAR2 <- cfAR2[1] + cfAR2[2] * x1[test] + cfAR2[3] * x2[test]
xpAR02 <- cfAR02[1] + cfAR02[2] * x2[test]
xpxp <- cbind(xpRW, xpAR1, xpAR2, xpAR02)
ts.plot(xpxp, col=1:4)
# ошибки прогноза
epep <- x2[test] - xpxp
ts.plot(epep, col=1:4)
abline(h=0)
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
reg1 <- lm(x ~ tr, subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg1), col="blue") # расчетное значение
xp <- predict(reg1, newdata=list(tr=tr[test])) # получаем прогноз
plot.ts(x[test])
lines(xp, col="blue", lw=2)
tr2 <- tr^2 # сделаем для квадратичного тренда
reg2 <- lm(x ~ tr+tr2, subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg2), col="blue")
xp2 <- predict(reg2, newdata=list(tr=tr[test], tr2=tr2[test])) # получаем прогноз
plot.ts(x[test])
lines(xp2, col="blue", lw=2)
# Задание 3.
x1 <- c(x[1], x[-length(x)]) #первый лаг
x2 <- c(x1[1], x1[-length(x)])
AR1 <- lm(x ~ x1, subset=train)
cfAR1 <- coef(AR1)
ts.plot(xpxp, col=1:4)
# ошибки прогноза
epep <- x2[test] - xpxp
# ошибки прогноза
epep <- x2[test] - xpxp
View(epep)
ts.plot(epep, col=1:4)
abline(h=0)
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
# Задание 2. Многошаговое прогнозирование валютного курса с помощью тренда
train <- df$Date < "2020-01-03" # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- ! train
tr <- 1:nrow(df)
reg1 <- lm(x ~ tr, subset=train) # линейная регрессия на первом году
View(epep)
xpxp <- cbind(xpRW, xpAR1, xpAR2, xpAR02)
ts.plot(xpxp, col=1:4)
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
epep[,1]
View(epep)
library(lmtest)
library(sandwich)
lmtest::
epep
lmtest::coeftest(epep[,1], epep[,4], vcov=vcovHAC)
# Значимость
epep[,1]
epep[,4]
lmtest::coeftest(epep[,1] - epep[,4], vcov=vcovHAC)
epep[,1] - epep[,4]
epep[,1]^2 - epep[,4]^2
lmtest::coeftest(epep[,1]^2 - epep[,4]^2, vcov=vcovHAC)
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1, data=epep)
epep
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
# ошибки прогноза
epep <- x[test] - xpxp
ts.plot(epep, col=1:4)
abline(h=0)
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
# Значимость
epep[,1]
library(lmtest)
library(sandwich)
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
reg11 <- lm(epep[,1]^2 - epep[,4]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
epep
MSE <- colMeans(epep^2) # среднее по столбцам. Получаем средний квадрат ошибки
RMSE <- sqrt(MSE)
RMSE
reg11 <- lm(epep[,4]^2 - epep[,1]^2 ~ 1)
lmtest::coeftest(reg11, vcov=vcovHAC)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.delim("USA_Icecream.tsv", skip=21, sep="")
View(df)
plo.ts(df)
plot.ts(df)
View(df)
plot.ts(df$VALUE~df$DATE)
plot.ts(df$VALUE~df$DATE)
df <- read.delim("USA_Icecream.tsv", skip=21, sep="")
plot.ts(df$VALUE~df$DATE)
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=0, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=21, sep="")
View(df2)
df2 <- read.delim("DEU_Dairy.tsv", skip=20, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=2, sep="")
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
View(df2)
View(df1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
plot.ts(df$VALUE ~ df$DATE)
plot.ts(df$VALUE ~ df$DATE, df)
plot.ts(df1$VALUE ~ df1$DATE, df)
df1$VALUE
plot(df1$VALUE ~ df1$DATE, df)
df1$DATE
plot.ts(df1$VALUE)
plot.ts(df1)
plot.ts(df1$VALUE)
plot.ts(y=df1$VALUE)
plot.ts(y = df)
plot.ts(x=df1$DATE, y=df1$VALUE)
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="")
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
cor.test(df1, df2)
cor.test(df1$VALUE, df2$dairy)
coef(cor.test(df1$VALUE, df2$dairy))
cor.test(df1$VALUE, df2$dairy)
View(df2)
View(df1)
View(df1)
View(df1)
train <- df1$VALUE[1:276-24] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- df1$VALUE[276-24:,]
train <- df1$VALUE[1:276-24] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
df1$VALUE[1:2]
df1$VALUE[1:20-1]
train <- df1$VALUE[1:276-24] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
df1$VALUE[1:276]
df1$VALUE[1:276-24]
train <- df1$VALUE[1:a1] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
a1 = 276 -24
train <- df1$VALUE[1:a1] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
a2 = a1 + 1
test <- df1$VALUE[a2:]
test <- df1$VALUE[a2:,]
test <- df1$VALUE[a2::]
df1$VALUE[1:]
df1$VALUE[1]
df1$VALUE[1:,]
test <- df1$VALUE[a2:nrow(df1)]
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
a1 = 276 - 24
a2 = a1 + 1
train <- df1$VALUE[1:a1] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- df1$VALUE[a2:nrow(df1)]
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
a1 = nrow(df) - 24
a2 = a1 + 1
train <- df1$VALUE[1:a1] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- df1$VALUE[a2:nrow(df1)]
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
a1 = nrow(df1) - 24
a2 = a1 + 1
train <- df1$VALUE[1:a1] # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- df1$VALUE[a2:nrow(df1)]
View(df1)
train <- df1$DATE < "1939-01-01" # Тестовый период последние 24 месяца
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
# второе задание
cor.test(df1$VALUE, df2$dairy) # cor = 0.49031, p-value = 10^-16. Значимо отличается от 0.
train <- df1$DATE < "1939-01-01" # Тестовый период последние 24 месяца
test <- ! train
sum(test)
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
x <- df1$VALUE
train <- df1$DATE < "1939-01-01" # Тестовый период последние 24 месяца
test <- ! train
# Прогнозирование
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.delim("Exchange_Rate_Report.tsv", skip=0, sep="")
Sys.setlocale("LC_TIME", "C")
df$Date <- as.Date(df$Date, "%d-%b-%Y") # преобразовываем дату
x <- df$Swiss_franc
plot.ts(x)
# 1 задание: Разделить на ряды по 20 наблюдений и создать из них матрицу (matrix(x, nrow=20))
XX <- matrix(x, nrow=20)
XX <- XX[, -24]
# Рассчитать матрицу корреляций.
RR <- cor(XX)
rr <- c(RR[lower.tri(RR)]) # нижний треугольник
hist(rr) # получили много ложных корреляций и на гистограмме это хорошо видно
# Задание 2. Многошаговое прогнозирование валютного курса с помощью тренда
train <- df$Date < "2020-01-03" # На тех же данных. Тренировочный период 1 год – построить линейный тренд. Нарисовать.
test <- ! train
tr <- 1:nrow(df)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
# второе задание
cor.test(df1$VALUE, df2$dairy) # cor = 0.49031, p-value = 10^-16. Значимо отличается от 0.
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
x <- df1$VALUE
plot(x)
plot.ts(x)
train <- df1$DATE < "1939-01-01" # Тестовый период последние 24 месяца
test <- ! train
plot(x)
plot.ts(x)
plot(x)
# Прогнозирование с помощью тренда и сезонных фиктивных переменных
x <- df1$VALUE
plot.ts(x)
train <- df1$DATE < "1939-01-01" # Тестовый период последние 24 месяца
test <- ! train
tr <- 1:nrow(df1)
month <- 1:12
month <- 1:12 * 12
month <- c(1:12)
month <- c(1:12) * 12
month <- 1:12
month <- 1:12
reg1 <- lm(x ~ tr + factor(month), subset=train) # линейная регрессия на первом году
month <- c(1:12)
reg1 <- lm(x ~ tr + factor(month), subset=train) # линейная регрессия на первом году
month <- factor(c(1:12))
reg1 <- lm(x ~ tr + month, subset=train) # линейная регрессия на первом году
month <- factor(c(1:12)) * 12
month <- factor(c(1:12))
plot.ts(x[train])
?c
month <- rep(1:12, 23)
reg1 <- lm(x ~ tr + factor(month), subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg1), col="blue")
xp <- predict(reg1, newdata=list(tr=tr[test])) # получаем прогноз
plot.ts(x[test])
lines(xp, col="blue", lw=2)
reg1 <- lm(x ~ tr + factor(month), subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg1), col="blue")
xp <- predict(reg1, newdata=list(tr=tr[test], month=month[test])) # получаем прогноз
plot.ts(x[test])
lines(xp, col="blue", lw=2)
tr <- 1:nrow(df1)
month <- rep(1:12, 23)
reg1 <- lm(x ~ tr + factor(month), subset=train) # линейная регрессия на первом году
plot.ts(x[train])
lines(fitted(reg1), col="blue")
xp <- predict(reg1, newdata=list(tr=tr[test], month=month[test])) # получаем прогноз
plot.ts(x[test])
lines(xp, col="blue", lw=2)
xp
epep <- x[test] - xp
ts.plot(epep)
abline(h=0)
plot.ts(x[test])
lines(xp, col="blue", lw=2)
abline(h=0, col="blue")
plot.ts(x[train])
lines(fitted(reg1), col="blue")
plot.ts(x[test]) # график прогноза
lines(xp, col="blue", lw=2)
epep <- x[test] - xp # вычисляем ошибки
ts.plot(epep) # график ошибок
abline(h=0, col="blue")
# MSE
MSE <- epep^2
# MSE
MSE <- colMeans(epep^2)
# MSE
MSE <- colMeans(epep^2)
# MSE
MSE <- mean(epep^2)
RMSE <- sqrt(MSE)
RMSE
