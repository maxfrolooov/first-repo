n <- 83
set.seed(1542643545) # случайные числа, псевдослучайные
eps <- rnorm(n) # mean = 0, sd = 1
#qnorm()
#pnorm()
mean(eps)
var(eps)
x <- rnorm(n, mean=3, sd=2)
y <- -5 + 2 * x + eps
t.test(scale(y)^3) # ассиметрия статистически не отличается от 0, нулевую гипотезу принимаем
t.test(scale(y)^4-3) # куртозис статистически не отличается от 0, нулевую гипотезу принимаем
qqnorm(scale(y)) # графически квантиль распределения данных y лежит на линии нормальной кривой, имеются незначительные выбросы на концах
qqline(scale(y))
shapiro.test(y) # p - value = 0,76 > 0.05, распределение на уровне значимости 0.05 имеет нормальное распределение
hist(y, breaks = 10, freq = FALSE)
curve(dnorm(x, mean(y), sd(y)), add = TRUE, col = "blue")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.delim("StreetLight2020.tsv", skip=5) # actual - траффик машин, actual в тысячах штук
# Оценка плотности для actual
x <- df$actual
summary(x) # сильно не симметричное распределение, есть выбросы
hist(x, breaks = 200, freq=FALSE)
hist(log(x), breaks = 100, freq=FALSE)
# ядерная оценка
plot(density(x, adjust=0.1)) # kernal density estimator, adjust - h полоса
#kernel = c("gaussian", "epanechnikov", "rectangular",
#           "triangular", "biweight",
#           "cosine", "optcosine")
?density
plot(density(log(x), adjust=0.3))
bounds <- c(0.1, 0.33, 1, 3.3, 10, 33, 100, 330) # посчитаем чистоты для этих интервалов. В логарифмах это примерное одномерный шаг
hi <- hist(x, breaks=bounds, plot=FALSE)
hi$counts # частоты в штуках
df2 <- data.frame(counts = hi$counts)
propt
df2$perc <- prop.table(df2$counts) * 100
row.names(df2) <- paste0(bounds[1:7], "_", bounds[2:8])
df2$lab.perc <- paste0(round(df2$perc, 2), "%")
df2
prop
### Тема: Гетероскедостичность
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.delim("StreetLight2020.tsv", skip=5) # read.table(sep="\t")
reg <- lm(actual ~ estimated, data=df)
summary(reg)
plot(actual ~ estimated, data=df) # Визуально на графике наблюдаем существенное увеличение разброса ошибок по мере возрастания estimated.
abline(reg, col="blue")
# График остатков (ei)
plot(resid(reg) ~ fitted(reg)) # resid - остатки для регрессии(e), fitted - расчетное значение (y с крышкой в качестве переменной z)
TT <- 100
# Белый шум
set.seed(123) # задаем начальное число для датчика
eps <- rnorm(TT, sd=2)
#plot(eps, type = "l")
#plot(eps, type = "b")
plot.ts(eps) # график для временных рядов
abline(h=0, col="blue")
acf(eps) # АКФ для белого шума, случайно болтается без какой то системы
# AR - авторегрессия
phi <- 0.8
x <- eps[1] # t=1
for (t in 2:TT) {
x[t] <- phi * x[t-1] + eps[t]
}
#x <- x + 10 # если хотим среднее 10
plot.ts(x) # график для временных рядов
abline(h=0, col="blue")
acf(x, lag.max=90) # убывает, но случайно уходит в отриц. область
TT <- 100
# Белый шум
set.seed(123) # задаем начальное число для датчика
eps <- rnorm(TT, sd=2)
#plot(eps, type = "l")
#plot(eps, type = "b")
plot.ts(eps) # график для временных рядов
abline(h=0, col="blue")
acf(eps) # АКФ для белого шума, случайно болтается без какой то системы
# AR - авторегрессия
phi <- 0.8
x <- eps[1] # t=1
for (t in 2:TT) {
x[t] <- phi * x[t-1] + eps[t]
}
#x <- x + 10 # если хотим среднее 10
plot.ts(x) # график для временных рядов
abline(h=0, col="blue")
acf(x, lag.max=90) # убывает, но случайно уходит в отриц. область
phi <- -0.8 # орицательная корреляция между соседними наблюдениями
for (t in 2:TT) {
x[t] <- phi * x[t-1] + eps[t]
}
x <- eps[1] # t=1
plot.ts(x) # график для временных рядов
abline(h=0, col="blue")
acf(x, lag.max=30)
phi <- 1 # случайное блуждание
x <- eps[1] # t=1
for (t in 2:TT) {
x[t] <- phi * x[t-1] + eps[t]
}
plot.ts(x) # график для временных рядов
abline(h=0, col="blue")
acf(x, lag.max=20)
# задание с курсом доллара
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read.csv("usd_volume.txt")
df <- data.frame(date=df$X.DATE., x = df$X.VOL.)
df$date <- as.Date(as.character(df$date), "%Y%m%d") # as.character преобразует в строчку числа
df <- df[df$x != 0, ]
# Лаги будем создавать внутри фрейма
TT <- nrow(df)
df <- within(df, # within - внутри датафрейма работаем.
{x1 <- c(x[1], x[-TT]) # 1-й лаг
x2 <- c(x1[1], x1[-TT]) # второй
x3 <- c(x2[1], x2[-TT])
x4 <- c(x3[1], x3[-TT])}
)
min(df$x)
plot(df$x ~ df$date, type="l")
acf(df$x) # автокорреляционная функция не угасает, медленно убывает. Похоже на нестационарность.
acf(df$x)[1] # первая автокорреляция
# Авторегрессия 1 порядка
reg1 <- lm(x ~ x1, data=df)
summary(reg1) # коэф. автокорреляции 0.688
reg2 <- lm(x ~ x1+x2, data=df)
summary(reg2)
reg3 <- lm(x ~ x1+x2+x3, data=df)
summary(reg3) # коэф. автокорреляции 0.688
reg4 <- lm(x ~ x1+x2+x3+x4, data=df)
summary(reg4)
library(lmtest)
library(sandwich) # ковар. матрица
coeftest(reg4, vcov=vcovHAC) # все коэф. значимы, все лаги нужны, укоротить нельзя.
# тест бройша-годфри
bgtest(reg4) # LM-test, 1 лаг был добавлен, p значение маленькое, 0 гипотезу отклоняем
bgtest(reg4, order=5) # жестко отклоняем
coeftest(reg4, vcov=vcovHAC) # все коэф. значимы, все лаги нужны, укоротить нельзя.
# тест бройша-годфри
bgtest(reg4) # LM-test, 1 лаг был добавлен, p значение маленькое, 0 гипотезу отклоняем
bgtest(reg4, order=5) # жестко отклоняем
