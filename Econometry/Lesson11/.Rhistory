setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
View(df1)
y <- log(df1)
y <- log(df1$VALUE)
plot.ts(y)
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
y <- log(df1$VALUE)
y <- log(df1)
View(df1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
y <- log(df1$VALUE)
plot.ts(y)
h <- 24
View(df1)
plot.ts(df1$VALUE)
plot.ts(y)
plot.ts(df1$VALUE)
y <- log(df1$VALUE)
plot.ts(y)
y <- log(df1$VALUE)
plot.ts(y)
plot.ts(df1$VALUE)
y <- log(df1$VALUE)
plot.ts(y)
plot.ts(y)
plot.ts(df1$VALUE)
plot.ts(y)
y <- log(df1$VALUE)
plot.ts(y)
h <- 24
TT <- length(y) - h
arima(y[1:TT], order=(1,1,1)) # order (p, d, q)- порядок arima
arima(y[1:TT], order=c(1,1,1),  # period - сколько сезонов. сезонность у нас не меняется - стационарная
seasonal = list(order = c(1, 0, 1), period=12)) # order (p, d, q)- порядок arima, d - сколько разностей взять для стационарности
sarma <- arima(y[1:TT], order=c(1,1,1),  # period - сколько сезонов. сезонность у нас не меняется - стационарная
seasonal = list(order = c(1, 0, 1), period=12)) # order (p, d, q)- порядок arima, d - сколько разностей взять для стационарности
sarma
#df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
data(df1)
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
#df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
data(df1)
df1 <- read.delim("USA_Icecream.tsv", skip=21, sep="", stringsAsFactors = FALSE)
#df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
data("df1")
y <- log(df1$VALUE)
plot.ts(y)
h <- 24 # делаем прогноз на 2 года
TT <- length(y) - h
sarma <- arima(y[1:TT], order=c(1,1,1),  # period - сколько сезонов. сезонность у нас не меняется - стационарная
seasonal = list(order = c(1, 0, 1), period=12)) # order (p, d, q)- порядок arima, d - сколько разностей взять для стационарности
sarma #
#df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
data("df1$VALUE")
#df2 <- read.delim("DEU_Dairy.tsv", skip=16, sep="")
data("df1")
summary(sarma)
plot(residuals(sarma))
plot(residuals(sarma)) # белый щум, который мы оценили
predict(sarma) # строим прогнощ
predict(sarma, n.ahead=h) # строим прогноз, h - горизонт прогноза
plot.ts(y)
lines(predict(sarma, n.ahead=h)$pred, col="blue")
plot(y)
plot.ts(y)
lines(predict(sarma, n.ahead=h)$pred, col="blue")
yp <- predict(sarma, n.ahead=h) # строим прогноз, h - горизонт прогноза. первая часть - точечный прогноз, вторая - сигма е.
yp <- predict(sarma, n.ahead=h)$pred # строим прогноз, h - горизонт прогноза. первая часть - точечный прогноз, вторая - сигма е.
sp <- predict(sarma, n.ahead=h)$se
plot.ts(y)
lines(yp, col="blue") # точный прогноз
L <- yp - 2*sp
U <- yp + 2*sp
plot.ts(y[TT+1:TT+h])
lines(yp, col="blue") # точный прогноз
plot.ts(y)
plot.ts(y[(TT+1):(TT+h)], ylim=c(1, 4))
lines(yp, col="blue") # точный прогноз
lines(yp[(TT+1):(TT+h)], col="blue") # точный прогноз
yp
lines(yp, col="blue") # точный прогноз
lines(c(yp), col="blue") # точный прогноз
L <- yp - 2*sp # lower
U <- yp + 2*sp # upper
lines(c(L), col="red")
lines(c(U), col="green")
points(y[(TT+1):(TT+h)], ylim=c(1, 4))
L <- yp - qnorm(1-0.05/2)*sp # lower, 95 % интервал
U <- yp + qnorm(1-0.05/2)*sp # upper
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
plot.ts(y[(TT+1):(TT+h)], ylim=c(1, 4))
points(y[(TT+1):(TT+h)], ylim=c(1, 4))
lines(c(yp), col="blue") # точный прогноз
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
L <- yp - qnorm(1-0.1/2)*sp # lower, 95 % интервал
U <- yp + qnorm(1-0.1/2)*sp # upper
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
plot.ts(y[(TT+1):(TT+h)], ylim=c(1, 4))
points(y[(TT+1):(TT+h)], ylim=c(1, 4))
lines(c(yp), col="blue") # точный прогноз
L <- yp - qnorm(1-0.1/2)*sp # lower, 95 % интервал
U <- yp + qnorm(1-0.1/2)*sp # upper
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
L <- yp - qnorm(1-0.05/2)*sp # lower, 95 % интервал
U <- yp + qnorm(1-0.05/2)*sp # upper
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
plot.ts(y[(TT+1):(TT+h)], ylim=c(1, 4))
points(y[(TT+1):(TT+h)], ylim=c(1, 4))
lines(c(yp), col="blue") # точный прогноз
L <- yp - qnorm(1-0.05/2)*sp # lower, 95 % интервал
U <- yp + qnorm(1-0.05/2)*sp # upper
lines(c(L), col="red") # у arima интервал расширяется, у arma нет, он стабилизируется.
lines(c(U), col="green")
df2 <- read.csv("US_sp500.csv", stringsAsFactors = FALSE)
View(df2)
View(df2)
View(df2)
View(df2)
View(df2)
View(df2)
r <- diff(log(df2$Close)) * 100
r <- diff(log(df2$Close)) * 100 # логарифмические доходности
plot(r)
plot.ts(r)
# GARCH, оценка волатильости
df2 <- read.csv("US_sp500.csv", stringsAsFactors = FALSE)
r <- diff(log(df2$Close)) * 100 # логарифмические доходности
plot.ts(r)
abline(h=0, col="blue")
abline(h=mean(r), col="blue")
abline(h=mean(r), col="red")
abline(h=0, col="blue")
abline(h=mean(r), col="red")
acf(r^2) # АКФ
acf(abs(r))
acf(r^2) # АКФ
acf(abs(r))
acf(r^2) # АКФ, синий - дов. интервал для белого шума
acf(abs(r)) # волатильность сильно автокоррелирована
var(r)
TT <- length(r)
# Riskmetrics
a <- 0.05
s2 <- 1 # дисперсия начальная, быстро забывается
TT <- length(r)
for (t in 2:TT)
s2[t] <- a * r[t]^2 + (1-a)*s2[t-1]
s2
vol <- sqrt(s2) # волатильность
for (t in 2:TT)
s2[t] <- a * r[t-1]^2 + (1-a)*s2[t-1]
vol <- sqrt(s2) # волатильность
plot.ts(vol)
plot.ts(r)
lines(vol, col="red")
plot.ts(r)
lines(vol, col="red", ldw=2)
lines(vol, col="red", lw=2)
plot.ts(r)
lines(vol, col="red")
plot.ts(r)
lines(vol, col="red")
lines(vol, col="red", lwd=10)
lines(vol, col="red", lwd=2)
plot.ts(r)
lines(vol, col="red", lwd=2)
# Riskmetrics
a <- 0.1
s2 <- 1 # дисперсия начальная, быстро забывается
TT <- length(r)
for (t in 2:TT)
s2[t] <- a * r[t-1]^2 + (1-a)*s2[t-1]
vol <- sqrt(s2) # волатильность
plot.ts(vol) # в процентных пунктах
plot.ts(r)
lines(vol, col="red", lwd=2)
# Riskmetrics
a <- 0.05
s2 <- 1 # дисперсия начальная, быстро забывается
TT <- length(r)
for (t in 2:TT)
s2[t] <- a * r[t-1]^2 + (1-a)*s2[t-1]
vol <- sqrt(s2) # волатильность
plot.ts(vol) # в процентных пунктах
plot.ts(r)
lines(vol, col="red", lwd=2)
install.packages("fGarch")
# GARCH
library(fGarch)
ga <- garchFit(r)
# GARCH
library(fGarch)
ga <- garchFit(r)
ga <- garchFit(r ~ garch(1,1))
ga
ga <- garchFit(r ~ garch(1,1), trace=FALSE)
ga
ga <- garchFit(r ~ garch(1,1),
cond.dist="std", # условное распределение
trace=FALSE)
ga
summary(ga)
ga
ga <- garchFit(r ~ garch(1,1),
cond.dist="sstd", # условное распределение, std - стьюдента
trace=FALSE)
ga # mu - среднее (не значимо), shape - параметр распределения (4 степени свободы - толстые хвосты, больше 20 - нормальное почти)
ga <- garchFit(~ garch(1,1), r,
cond.dist="sstd", # условное распределение, sstd - скошенный стьюдент
trace=FALSE)
ga # mu - среднее (не значимо), shape - параметр распределения (4 степени свободы - толстые хвосты, больше 20 - нормальное почти). skew - скошенность значима
ga # mu - среднее (не значимо), shape - параметр распределения (4 степени свободы - толстые хвосты, больше 20 - нормальное почти). skew - скошенность значима
ga <- garchFit(r~ garch(1,1), data.frame(r),
cond.dist="sstd", # условное распределение, sstd - скошенный стьюдент
trace=FALSE)
ga # mu - среднее (значимо), shape - параметр распределения (7 степени свободы - толстые хвосты, больше 20 - нормальное почти). skew - скошенность значима
volatility(ga)
plot.ts(r)
lines(volatility(ga), col="red", lwd=2)
plot.ts(r)
lines(volatility(ga), col="blue", lwd=2)
plot.ts(r)
lines(volatility(ga), col="blue", lwd=2) # volatility - корень из сигма^2
predict(ga)
plot(predict(ga))
predict(ga)
predict(ga)$standardDeviation
plot.ts(r)
lines(volatility(ga), col="blue", lwd=2) # volatility - корень из сигма^2
plot(predict(ga)$standardDeviation)
plot.ts(r)
lines(volatility(ga), col="blue", lwd=2) # volatility - корень из сигма^2
plot(predict(ga)$standardDeviation)
